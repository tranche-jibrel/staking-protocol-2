
digraph UmlClassDiagram {
rankdir=BT
color=black
arrowhead=open
node [shape=record, style=filled, fillcolor=gray95]
subgraph  graph_0 {
label="contracts"
0 [label="{JAdminTools| | Internal:\l\ \ \ \ _addAdmin(account: address)\l\ \ \ \ _removeAdmin(account: address)\lExternal:\l\ \ \ \ initialize()\l\ \ \ \ addAdmin(account: address)\l\ \ \ \ removeAdmin(account: address)\l\ \ \ \ renounceAdmin()\l\ \ \ \ updateVersion(_ver: uint256)\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyAdmins()\l\ \ \ \ isAdmin(account: address): bool\l}"]
1 [label="{JAdminToolsStorage| Public:\l\ \ \ contractVersion: uint256\l\ \ \ adminCounter: uint256\l\ \ \ _Admins: mapping\(address=\>bool\)\l| }"]
2 [label="{JFeesCollector| | External:\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ \<\<payable\>\> swapEthForToken(_token: address, _amount: uint256, amountOutMin: uint256)\l\ \ \ \ initialize(_adminTools: address)\l\ \ \ \ setAdminToolsAddress(_adminTools: address)\l\ \ \ \ updateVersion(_ver: uint256)\l\ \ \ \ ethWithdraw(_amount: uint256)\l\ \ \ \ allowToken(_tok: address)\l\ \ \ \ disallowToken(_tok: address)\l\ \ \ \ withdrawTokens(_tok: address, _amount: uint256)\l\ \ \ \ sendTokensToReceiver(_tok: address, _receiver: address, _amount: uint256)\l\ \ \ \ setUniswapAddresses(_factory: address, _routerV02: address)\l\ \ \ \ swapTokenForEth(_token: address, _amount: uint256, amountOutMin: uint256)\l\ \ \ \ swapTokenForToken(_tokenSent: address, _tokenBack: address, _amount: uint256, amountOutMin: uint256)\lPublic:\l\ \ \ \ \<\<modifier\>\> onlyAdmins()\l\ \ \ \ getEthBalance(): uint256\l\ \ \ \ getTokenBalance(_tok: address): uint256\l\ \ \ \ isTokenAllowed(_tok: address): bool\l\ \ \ \ pairInfo(_tokenA: address, _tokenB: address): (reserveA: uint256, reserveB: uint256, totalSupply: uint256)\l}"]
3 [label="{JFeesCollectorStorage| Public:\l\ \ \ contractVersion: uint256\l\ \ \ tokensAllowed: mapping\(address=\>bool\)\l\ \ \ factory: address\l\ \ \ uniV2Router02: IUniswapV2Router02\l\ \ \ adminToolsAddress: address\l| }"]
4 [label="{MultiRewards| | External:\l\ \ \ \ totalSupply(): uint256\l\ \ \ \ balanceOf(account: address): uint256\l\ \ \ \ getRewardForDuration(_rewardsToken: address): uint256\l\ \ \ \ setRewardsDistributor(_rewardsToken: address, _rewardsDistributor: address)\l\ \ \ \ stake(amount: uint256)\l\ \ \ \ exit()\l\ \ \ \ notifyRewardAmount(_rewardsToken: address, reward: uint256)\l\ \ \ \ notifyRewardAmountNoTransfer(_rewardsToken: address, reward: uint256)\l\ \ \ \ recoverERC20(tokenAddress: address, tokenAmount: uint256)\l\ \ \ \ setRewardsDuration(_rewardsToken: address, _rewardsDuration: uint256)\lPublic:\l\ \ \ \ \<\<modifier\>\> updateReward(account: address)\l\ \ \ \ initialize(_owner: address, _stakingToken: address)\l\ \ \ \ addReward(_rewardsToken: address, _rewardsDistributor: address, _rewardsDuration: uint256)\l\ \ \ \ lastTimeRewardApplicable(_rewardsToken: address): uint256\l\ \ \ \ getTokenBalance(_rewardsToken: address): uint256\l\ \ \ \ rewardPerToken(_rewardsToken: address): uint256\l\ \ \ \ earned(account: address, _rewardsToken: address): uint256\l\ \ \ \ withdraw(amount: uint256)\l\ \ \ \ getReward()\l}"]
5 [label="{MultiRewardsStorage| Public:\l\ \ \ stakingToken: IERC20Upgradeable\l\ \ \ rewardData: mapping\(address=\>Reward\)\l\ \ \ rewardTokens: address[]\l\ \ \ userRewardPerTokenPaid: mapping\(address=\>mapping\(address=\>uint256\)\)\l\ \ \ rewards: mapping\(address=\>mapping\(address=\>uint256\)\)\l\ \ \ _totalSupply: uint256\l\ \ \ _balances: mapping\(address=\>uint256\)\l| }"]
"5struct0" [label="{\<\<struct\>\>\nReward|rewardsDistributor: address\lrewardsDuration: uint256\lperiodFinish: uint256\lrewardRate: uint256\llastUpdateTime: uint256\lrewardPerTokenStored: uint256\l}"]
"5struct0" -> 5 [arrowhead=diamond, weight=3]
6 [label="{\<\<Library\>\>\nTransferETHHelper| | Internal:\l\ \ \ \ safeTransferETH(_to: address, _value: uint256)\l}"]
}
subgraph  graph_1 {
label="contracts/interfaces"
7 [label="{\<\<Interface\>\>\nIJAdminTools| | External:\l\ \ \ \  isAdmin(account: address): bool\l\ \ \ \  addAdmin(account: address)\l\ \ \ \  removeAdmin(account: address)\l\ \ \ \  renounceAdmin()\lPublic:\l\ \ \ \ \<\<event\>\> AdminAdded(account: address)\l\ \ \ \ \<\<event\>\> AdminRemoved(account: address)\l}"]
8 [label="{\<\<Interface\>\>\nIJFeesCollector| | Public:\l\ \ \ \ \<\<event\>\> EthReceived(sender: address, amount: uint256, blockNumber: uint256)\l\ \ \ \ \<\<event\>\> EthWithdrawn(amount: uint256, blockNumber: uint256)\l\ \ \ \ \<\<event\>\> TokenAdded(token: address, blockNumber: uint256)\l\ \ \ \ \<\<event\>\> TokenRemoved(token: address, blockNumber: uint256)\l\ \ \ \ \<\<event\>\> TokenWithdrawn(token: address, amount: uint256, blockNumber: uint256)\l}"]
9 [label="{\<\<Interface\>\>\nIMultiRewards| | Public:\l\ \ \ \ \<\<event\>\> RewardAdded(reward: uint256)\l\ \ \ \ \<\<event\>\> Staked(user: address, amount: uint256)\l\ \ \ \ \<\<event\>\> Withdrawn(user: address, amount: uint256)\l\ \ \ \ \<\<event\>\> RewardPaid(user: address, rewardsToken: address, reward: uint256)\l\ \ \ \ \<\<event\>\> RewardsDurationUpdated(token: address, newDuration: uint256)\l\ \ \ \ \<\<event\>\> Recovered(token: address, amount: uint256)\l}"]
10 [label="{\<\<Interface\>\>\nIUniswapV2Pair| | External:\l\ \ \ \  name(): string\l\ \ \ \  symbol(): string\l\ \ \ \  decimals(): uint8\l\ \ \ \  totalSupply(): uint\l\ \ \ \  balanceOf(owner: address): uint\l\ \ \ \  allowance(owner: address, spender: address): uint\l\ \ \ \  approve(spender: address, value: uint): bool\l\ \ \ \  transfer(to: address, value: uint): bool\l\ \ \ \  transferFrom(from: address, to: address, value: uint): bool\l\ \ \ \  DOMAIN_SEPARATOR(): bytes32\l\ \ \ \  PERMIT_TYPEHASH(): bytes32\l\ \ \ \  nonces(owner: address): uint\l\ \ \ \  permit(owner: address, spender: address, value: uint, deadline: uint, v: uint8, r: bytes32, s: bytes32)\l\ \ \ \  MINIMUM_LIQUIDITY(): uint\l\ \ \ \  factory(): address\l\ \ \ \  token0(): address\l\ \ \ \  token1(): address\l\ \ \ \  getReserves(): (reserve0: uint112, reserve1: uint112, blockTimestampLast: uint32)\l\ \ \ \  price0CumulativeLast(): uint\l\ \ \ \  price1CumulativeLast(): uint\l\ \ \ \  kLast(): uint\l\ \ \ \  mint(to: address): (liquidity: uint)\l\ \ \ \  burn(to: address): (amount0: uint, amount1: uint)\l\ \ \ \  swap(amount0Out: uint, amount1Out: uint, to: address, data: bytes)\l\ \ \ \  skim(to: address)\l\ \ \ \  sync()\lPublic:\l\ \ \ \ \<\<event\>\> Approval(owner: address, spender: address, value: uint)\l\ \ \ \ \<\<event\>\> Transfer(from: address, to: address, value: uint)\l\ \ \ \ \<\<event\>\> Mint(sender: address, amount0: uint, amount1: uint)\l\ \ \ \ \<\<event\>\> Burn(sender: address, amount0: uint, amount1: uint, to: address)\l\ \ \ \ \<\<event\>\> Swap(sender: address, amount0In: uint, amount1In: uint, amount0Out: uint, amount1Out: uint, to: address)\l\ \ \ \ \<\<event\>\> Sync(reserve0: uint112, reserve1: uint112)\l}"]
11 [label="{\<\<Interface\>\>\nIUniswapV2Router01| | External:\l\ \ \ \  factory(): address\l\ \ \ \  WETH(): address\l\ \ \ \  addLiquidity(tokenA: address, tokenB: address, amountADesired: uint, amountBDesired: uint, amountAMin: uint, amountBMin: uint, to: address, deadline: uint): (amountA: uint, amountB: uint, liquidity: uint)\l\ \ \ \  addLiquidityETH(token: address, amountTokenDesired: uint, amountTokenMin: uint, amountETHMin: uint, to: address, deadline: uint): (amountToken: uint, amountETH: uint, liquidity: uint)\l\ \ \ \  removeLiquidity(tokenA: address, tokenB: address, liquidity: uint, amountAMin: uint, amountBMin: uint, to: address, deadline: uint): (amountA: uint, amountB: uint)\l\ \ \ \  removeLiquidityETH(token: address, liquidity: uint, amountTokenMin: uint, amountETHMin: uint, to: address, deadline: uint): (amountToken: uint, amountETH: uint)\l\ \ \ \  removeLiquidityWithPermit(tokenA: address, tokenB: address, liquidity: uint, amountAMin: uint, amountBMin: uint, to: address, deadline: uint, approveMax: bool, v: uint8, r: bytes32, s: bytes32): (amountA: uint, amountB: uint)\l\ \ \ \  removeLiquidityETHWithPermit(token: address, liquidity: uint, amountTokenMin: uint, amountETHMin: uint, to: address, deadline: uint, approveMax: bool, v: uint8, r: bytes32, s: bytes32): (amountToken: uint, amountETH: uint)\l\ \ \ \  swapExactTokensForTokens(amountIn: uint, amountOutMin: uint, path: address[], to: address, deadline: uint): (amounts: uint[])\l\ \ \ \  swapTokensForExactTokens(amountOut: uint, amountInMax: uint, path: address[], to: address, deadline: uint): (amounts: uint[])\l\ \ \ \  swapExactETHForTokens(amountOutMin: uint, path: address[], to: address, deadline: uint): (amounts: uint[])\l\ \ \ \  swapTokensForExactETH(amountOut: uint, amountInMax: uint, path: address[], to: address, deadline: uint): (amounts: uint[])\l\ \ \ \  swapExactTokensForETH(amountIn: uint, amountOutMin: uint, path: address[], to: address, deadline: uint): (amounts: uint[])\l\ \ \ \  swapETHForExactTokens(amountOut: uint, path: address[], to: address, deadline: uint): (amounts: uint[])\l\ \ \ \  quote(amountA: uint, reserveA: uint, reserveB: uint): (amountB: uint)\l\ \ \ \  getAmountOut(amountIn: uint, reserveIn: uint, reserveOut: uint): (amountOut: uint)\l\ \ \ \  getAmountIn(amountOut: uint, reserveIn: uint, reserveOut: uint): (amountIn: uint)\l\ \ \ \  getAmountsOut(amountIn: uint, path: address[]): (amounts: uint[])\l\ \ \ \  getAmountsIn(amountOut: uint, path: address[]): (amounts: uint[])\l}"]
12 [label="{\<\<Interface\>\>\nIUniswapV2Router02| | External:\l\ \ \ \  removeLiquidityETHSupportingFeeOnTransferTokens(token: address, liquidity: uint, amountTokenMin: uint, amountETHMin: uint, to: address, deadline: uint): (amountETH: uint)\l\ \ \ \  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(token: address, liquidity: uint, amountTokenMin: uint, amountETHMin: uint, to: address, deadline: uint, approveMax: bool, v: uint8, r: bytes32, s: bytes32): (amountETH: uint)\l\ \ \ \  swapExactTokensForTokensSupportingFeeOnTransferTokens(amountIn: uint, amountOutMin: uint, path: address[], to: address, deadline: uint)\l\ \ \ \  swapExactETHForTokensSupportingFeeOnTransferTokens(amountOutMin: uint, path: address[], to: address, deadline: uint)\l\ \ \ \  swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn: uint, amountOutMin: uint, path: address[], to: address, deadline: uint)\l}"]
}
subgraph  graph_2 {
label="contracts/mocks"
13 [label="{RewardToken| | Public:\l\ \ \ \ initialize(_initialSupply: uint256)\l}"]
14 [label="{SliceToken| | Public:\l\ \ \ \ initialize(_initialSupply: uint256)\l}"]
}
subgraph  graph_3 {
label="contracts/uniswap"
15 [label="{\<\<Library\>\>\nUniswapV2Library| | Internal:\l\ \ \ \ sortTokens(tokenA: address, tokenB: address): (token0: address, token1: address)\l\ \ \ \ pairFor(factory: address, tokenA: address, tokenB: address): (pair: address)\l\ \ \ \ getReserves(factory: address, tokenA: address, tokenB: address): (reserveA: uint, reserveB: uint)\l\ \ \ \ quote(amountA: uint, reserveA: uint, reserveB: uint): (amountB: uint)\l\ \ \ \ getAmountOut(amountIn: uint, reserveIn: uint, reserveOut: uint): (amountOut: uint)\l\ \ \ \ getAmountIn(amountOut: uint, reserveIn: uint, reserveOut: uint): (amountIn: uint)\l\ \ \ \ getAmountsOut(factory: address, amountIn: uint, path: address[]): (amounts: uint[])\l\ \ \ \ getAmountsIn(factory: address, amountOut: uint, path: address[]): (amounts: uint[])\l}"]
}
0 -> 1 [arrowhead=empty, arrowsize=3, weight=4, ]
0 -> 7 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
2 -> 3 [arrowhead=empty, arrowsize=3, weight=4, ]
2 -> 8 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
2 -> 7 [style=dashed, ]
2 -> 6 [style=dashed, ]
2 -> 10 [style=dashed, ]
2 -> 15 [style=dashed, ]
3 -> 12 []
4 -> 5 [arrowhead=empty, arrowsize=3, weight=4, ]
4 -> 9 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
12 -> 11 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
15 -> 10 [style=dashed, ]
}